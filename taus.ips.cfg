MEMORY {
    RAM: start = $0780, size = $0080, file = ""; # GAMEBSS init is limited to 255 bytes
    IPSHDR: start = $0000, size = $0005;
    SKIP_LEGAL_HDR:start = $0000, size = $0005;
    SKIP_LEGAL:    start = $8236, size = $0002;
    JMP_INIT_GAME_STATEHDR:start = $0000, size = $0005;
    JMP_INIT_GAME_STATE:   start = $86E5, size = $0004;
    JMP_RENDER_STATSHDR:start = $0000, size = $0005;
    JMP_RENDER_STATS:   start = $9645, size = $0004;
    STATS_NUMBERHDR:start = $0000, size = $0005;
    STATS_NUMBER:   start = $9669, size = $0002;
    HUNK1HDR:start = $0000, size = $0005;
    HUNK1:   start = $996A, size = $0003;
    JMP_POST_GAME_STATSHDR:start = $0000, size = $0005;
    JMP_POST_GAME_STATS:   start = $9A4D, size = $0004;
    JMP_STATS_PER_LINE_CLEARHDR:start = $0000, size = $0005;
    JMP_STATS_PER_LINE_CLEAR:   start = $9C9E, size = $0004;
    PREPARE_AUTOREPEATX_CMPHDR:start = $0000, size = $0005;
    PREPARE_AUTOREPEATX_CMP:   start = $89C8, size = $0002;
    PREPARE_AUTOREPEATX_LDAHDR:start = $0000, size = $0005;
    PREPARE_AUTOREPEATX_LDA:   start = $89CC, size = $0002;
    ROTATE_TETRIMINOHDR:start = $0000, size = $0005;
    ROTATE_TETRIMINO:   start = $88AB, size = $0003;
    DROP_TETRIMINOHDR:start = $0000, size = $0005;
    DROP_TETRIMINO:   start = $81D5, size = $0003;
    UPDATE_FALLTIMERHDR:start = $0000, size = $0005;
    UPDATE_FALLTIMER:   start = $8892, size = $0004;
    INIT_FIRST_PIECEHDR:start = $0000, size = $0005;
    INIT_FIRST_PIECE:   start = $8739, size = $0006;
    ORIENTATIONTABLEHDR:start = $0000, size = $0005;
    ORIENTATIONTABLE:   start = $8A9C, size = 12 * 20;
    GAME_BGHDR:start = $0000, size = $0005;
    GAME_BG:   start = $BF3C, size = $8000;
    CODEHDR:start = $0000, size = $0005;
    CODE:   start = $F9EB, size = $0515;
    CHART_IPSCHR: start = $0000, size = $8000;
    IPSCHR: start = $0000, size = $8000;
    IPSEOF: start = $0000, size = $0003;
}

SEGMENTS {
    BSS: load = RAM, type = bss;
    GAMEBSS: load = RAM, type = bss, define = yes;
    IPSHEADER:load = IPSHDR;
    IPSEOF:   load = IPSEOF;
    IPSCHR:   load = IPSCHR;
    CHART_IPSCHR:load = CHART_IPSCHR;
    CODEHDR: load = CODEHDR;
    CODE:    load = CODE, define = yes;
    HUNK1HDR: load = HUNK1HDR;
    HUNK1:    load = HUNK1, define = yes;
    GAME_BGHDR: load = GAME_BGHDR;
    GAME_BG:    load = GAME_BG, define = yes;
    STATS_NUMBERHDR: load = STATS_NUMBERHDR;
    STATS_NUMBER:    load = STATS_NUMBER, define = yes;
    SKIP_LEGAL_HDR:load = SKIP_LEGAL_HDR;
    SKIP_LEGAL:    load = SKIP_LEGAL, define = yes;
    JMP_STATS_PER_LINE_CLEARHDR: load = JMP_STATS_PER_LINE_CLEARHDR;
    JMP_STATS_PER_LINE_CLEAR:    load = JMP_STATS_PER_LINE_CLEAR, define = yes;
    JMP_INIT_GAME_STATEHDR: load = JMP_INIT_GAME_STATEHDR;
    JMP_INIT_GAME_STATE:    load = JMP_INIT_GAME_STATE, define = yes;
    JMP_POST_GAME_STATSHDR: load = JMP_POST_GAME_STATSHDR;
    JMP_POST_GAME_STATS:    load = JMP_POST_GAME_STATS, define = yes;
    JMP_RENDER_STATSHDR: load = JMP_RENDER_STATSHDR;
    JMP_RENDER_STATS:    load = JMP_RENDER_STATS, define = yes;
    PREPARE_AUTOREPEATX_CMPHDR: load = PREPARE_AUTOREPEATX_CMPHDR;
    PREPARE_AUTOREPEATX_CMP:    load = PREPARE_AUTOREPEATX_CMP, define = yes;
    PREPARE_AUTOREPEATX_LDAHDR: load = PREPARE_AUTOREPEATX_LDAHDR;
    PREPARE_AUTOREPEATX_LDA:    load = PREPARE_AUTOREPEATX_LDA, define = yes;
    ROTATE_TETRIMINOHDR:        load = ROTATE_TETRIMINOHDR;
    ROTATE_TETRIMINO:           load = ROTATE_TETRIMINO, define = yes;
    DROP_TETRIMINOHDR:          load = DROP_TETRIMINOHDR;
    DROP_TETRIMINO:             load = DROP_TETRIMINO, define = yes;
    UPDATE_FALLTIMERHDR:        load = UPDATE_FALLTIMERHDR;
    UPDATE_FALLTIMER:           load = UPDATE_FALLTIMER, define = yes;
    INIT_FIRST_PIECEHDR:        load = INIT_FIRST_PIECEHDR;
    INIT_FIRST_PIECE:           load = INIT_FIRST_PIECE, define = yes;
    ORIENTATIONTABLEHDR:        load = ORIENTATIONTABLEHDR;
    ORIENTATIONTABLE:           load = ORIENTATIONTABLE, define = yes;
}
