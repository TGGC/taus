--- orig
+++ mod
@@ -1,10 +1,12 @@
 ; Input file: build/tetris-PRG.bin
 ; Page:       1
 
 
         .setcpu "6502"
+        
+.include "../twoplayer.inc"
 
 tmp1            := $0000
 tmp2            := $0001
 tmp3            := $0002
 tmpBulkCopyToPpuReturnAddr:= $0005
@@ -31,10 +33,18 @@ score           := $0053
 completedLines  := $0056
 lineIndex       := $0057                        ; Iteration count of playState_checkForCompletedRows
 curtainRow      := $0058
 startHeight     := $0059
 garbageHole     := $005A                        ; Position of hole in received garbage
+nextPiece_      := $005B
+.exportzp nextPiece_
+personal_rng    := $005C        ; size 2
+.exportzp personal_rng
+spawnID_        := $005E
+.exportzp spawnID_
+spawnCount_        := $005F
+.exportzp spawnCount_
 player1_tetriminoX:= $0060
 player1_tetriminoY:= $0061
 player1_currentPiece:= $0062
 player1_levelNumber:= $0064
 player1_fallTimer:= $0065
@@ -50,10 +60,18 @@ player1_rowY    := $0072
 player1_score   := $0073
 player1_completedLines:= $0076
 player1_curtainRow:= $0078
 player1_startHeight:= $0079
 player1_garbageHole:= $007A
+player1_nextPiece:= $007B
+.exportzp player1_nextPiece
+player1_rng    := $007C        ; size 2
+.exportzp player1_rng
+player1_spawnID_:= $007E
+.exportzp player1_spawnID_
+player1_spawnCount_:= $007F
+.exportzp player1_spawnCount_
 player2_tetriminoX:= $0080
 player2_tetriminoY:= $0081
 player2_currentPiece:= $0082
 player2_levelNumber:= $0084
 player2_fallTimer:= $0085
@@ -69,10 +87,18 @@ player2_rowY    := $0092
 player2_score   := $0093
 player2_completedLines:= $0096
 player2_curtainRow:= $0098
 player2_startHeight:= $0099
 player2_garbageHole:= $009A
+player2_nextPiece:= $009B
+.exportzp player2_nextPiece
+player2_rng    := $009C        ; size 2
+.exportzp player2_rng
+player2_spawnID_:= $009E
+.exportzp player2_spawnID_
+player2_spawnCount_:= $009F
+.exportzp player2_spawnCount_
 spriteXOffset   := $00A0
 spriteYOffset   := $00A1
 spriteIndexInOamContentLookup:= $00A2
 outOfDateRenderFlags:= $00A3                    ; Bit 0-lines 1-level 2-score 6-stats 7-high score entry letter
 twoPlayerPieceDelayCounter:= $00A4              ; 0 is not delaying
@@ -241,20 +267,23 @@ initRam:ldx     #$00
 nmi:    pha
         txa
         pha
         tya
         pha
+        jsr     render
+        .import copyOamStagingToOam_mod
+        jmp     copyOamStagingToOam_mod
+.export after_copyOamStagingToOam_mod
+after_copyOamStagingToOam_mod:
         lda     #$00
         sta     oamStagingLength
-        jsr     render
         dec     sleepCounter
         lda     sleepCounter
         cmp     #$FF
         bne     @jumpOverIncrement
         inc     sleepCounter
 @jumpOverIncrement:
-        jsr     copyOamStagingToOam
         lda     frameCounter
         clc
         adc     #$01
         sta     frameCounter
         lda     #$00
@@ -426,32 +455,36 @@ branchOnGameMode:
 gameModeState_updatePlayer1:
         jsr     makePlayer1Active
         jsr     branchOnPlayStatePlayer1
         jsr     stageSpriteForCurrentPiece
         jsr     savePlayer1State
-        jsr     stageSpriteForNextPiece
+        ;jsr     stageSpriteForNextPiece
+        .import stageSpriteForNextPiece_player1_mod
+        jsr     stageSpriteForNextPiece_player1_mod
         inc     gameModeState
         rts
 
 gameModeState_updatePlayer2:
         lda     numberOfPlayers
         cmp     #$02
         bne     @ret
         jsr     makePlayer2Active
         jsr     branchOnPlayStatePlayer2
         jsr     stageSpriteForCurrentPiece
-        jsr     savePlayer2State
+        .import savePlayer2State_mod
+        jsr     savePlayer2State_mod
 @ret:   inc     gameModeState
         rts
 
+.import gameModeState_handleGameOver_mod
 gameMode_playAndEndingHighScore:
         lda     gameModeState
         jsr     switch_s_plus_2a
         .addr   gameModeState_initGameBackground
         .addr   gameModeState_initGameState
         .addr   gameModeState_updateCountersAndNonPlayerState
-        .addr   gameModeState_handleGameOver
+        .addr   gameModeState_handleGameOver_mod
         .addr   gameModeState_updatePlayer1
         .addr   gameModeState_updatePlayer2
         .addr   gameModeState_checkForResetKeyCombo
         .addr   gameModeState_startButtonHandling
         .addr   gameModeState_vblankThenRunState2
@@ -517,11 +550,12 @@ gameMode_legalScreen:
         jsr     updateAudioWaitForNmiAndResetOamStaging
         lda     #$00
         ldx     #$02
         ldy     #$02
         jsr     memset_page
-        lda     #$FF
+        ; TODO: split into separate mod file
+        lda     #$00
         jsr     sleep_for_a_vblanks
         lda     #$FF
         sta     generalCounter
 @waitForStartButton:
         lda     newlyPressedButtons_player1
@@ -753,12 +787,16 @@ gameMode_levelMenu:
         jsr     changeCHRBank0
         lda     #$00
         jsr     changeCHRBank1
         jsr     bulkCopyToPpu
         .addr   menu_palette
-        jsr     bulkCopyToPpu
-        .addr   level_menu_nametable
+        ;jsr     bulkCopyToPpu
+        ;.addr   level_menu_nametable
+        .import gameMode_levelMenu_nametable_mod
+        jsr     gameMode_levelMenu_nametable_mod
+        nop
+        nop
         lda     gameType
         bne     @skipTypeBHeightDisplay
         jsr     bulkCopyToPpu
         .addr   height_menu_nametablepalette_patch
 @skipTypeBHeightDisplay:
@@ -814,12 +852,14 @@ gameMode_levelMenu_processPlayer1Navigat
 @startAndANotPressed:
         lda     #$00
         sta     gameModeState
         lda     #$02
         sta     soundEffectSlot1Init
-        inc     gameMode
-        rts
+        ;inc     gameMode
+        ;rts
+        .import gameMode_levelMenu_processPlayer2Navigation
+        jmp     gameMode_levelMenu_processPlayer2Navigation
 
 @checkBPressed:
         lda     newlyPressedButtons_player1
         cmp     #$40
         bne     @chooseRandomHole_player1
@@ -844,11 +884,13 @@ @chooseRandomHole_player2:
         lda     rng_seed
         and     #$0F
         cmp     #$0A
         bpl     @chooseRandomHole_player2
         sta     player2_garbageHole
-        jsr     updateAudioWaitForNmiAndResetOamStaging
+        ;jsr     updateAudioWaitForNmiAndResetOamStaging
+        .import gameMode_levelMenu_processPlayer1Navigation_processPlayer2
+        jmp     gameMode_levelMenu_processPlayer1Navigation_processPlayer2
         jmp     gameMode_levelMenu_processPlayer1Navigation
 
 ; Starts by checking if right pressed
 gameMode_levelMenu_handleLevelHeightNavigation:
         lda     newlyPressedButtons
@@ -1026,12 +1068,18 @@ gameModeState_initGameBackground:
         jsr     changeCHRBank0
         lda     #$03
         jsr     changeCHRBank1
         jsr     bulkCopyToPpu
         .addr   game_palette
-        jsr     bulkCopyToPpu
-        .addr   game_nametable
+        ;jsr     bulkCopyToPpu
+        ;.addr   game_nametable
+        .import initGameBackground_mod
+        jmp     initGameBackground_mod
+.export after_initGameBackground_mod_player1
+after_initGameBackground_mod_player1:
+        nop
+        nop
         lda     #$20
         sta     PPUADDR
         lda     #$83
         sta     PPUADDR
         lda     gameType
@@ -1088,10 +1136,12 @@ @endOfPpuPatching:
         lda     startHeight
         and     #$0F
         sta     PPUDATA
         jmp     gameModeState_initGameBackground_finish
 
+.export after_initGameBackground_mod_player2
+after_initGameBackground_mod_player2:
 gameModeState_initGameBackground_finish:
         jsr     waitForVBlankAndEnableNmi
         jsr     updateAudioWaitForNmiAndResetOamStaging
         jsr     updateAudioWaitForNmiAndEnablePpuRendering
         jsr     updateAudioWaitForNmiAndResetOamStaging
@@ -1113,12 +1163,14 @@ game_typeb_nametable_patch:
         .byte   $FE,$23,$57,$3D,$3E,$3E,$3E,$3E
         .byte   $3E,$3E,$3F,$FD
 gameModeState_initGameState:
         lda     #$EF
         ldx     #$04
-        ldy     #$04
-        jsr     memset_page
+        ldy     #$05
+        ;jsr     memset_page
+        .import initGameState_mod
+        jsr     initGameState_mod
         ldx     #$0F
         lda     #$00
 ; statsByType
 @initStatsByType:
         sta     $03EF,x
@@ -1165,17 +1217,23 @@ @initStatsByType:
         sta     player1_autorepeatY
         sta     player2_autorepeatY
         jsr     chooseNextTetrimino
         sta     player1_currentPiece
         sta     player2_currentPiece
+.ifndef TOURNAMENT_MODE
         jsr     incrementPieceStat
-        ldx     #$17
+.else
+        .import statsPerBlock_tournamentMode
+        jsr     statsPerBlock_tournamentMode
+.endif
+        ;ldx     #$17
+        ldx     #personal_rng
         ldy     #$02
         jsr     generateNextPseudorandomNumber
         jsr     chooseNextTetrimino
-        sta     nextPiece
-        sta     nextPiece_2player
+        sta     player1_nextPiece
+        sta     player2_nextPiece
         lda     gameType
         beq     @skipTypeBInit
         lda     #$25
         sta     player1_lines
         sta     player2_lines
@@ -1559,17 +1617,17 @@ stageSpriteForCurrentPiece:
         lda     numberOfPlayers
         cmp     #$01
         beq     L8A2C
         lda     generalCounter3
         sec
-        sbc     #$40
+        sbc     #$50
         sta     generalCounter3
         lda     activePlayer
         cmp     #$01
         beq     L8A2C
         lda     generalCounter3
-        adc     #$6F
+        adc     #$8F
         sta     generalCounter3
 L8A2C:  clc
         lda     tetriminoY
         rol     a
         rol     a
@@ -1603,11 +1661,12 @@ L8A4B:  lda     orientationTable,x
         lda     orientationTable,x
         sta     oamStaging,y
         inc     oamStagingLength
         iny
         inx
-        lda     #$02
+        ;lda     #$02
+        lda     activePlayer    ; palette
         sta     oamStaging,y
         lda     originalY
         cmp     #$2F
         bcs     L8A84
         inc     oamStagingLength
@@ -1889,36 +1948,61 @@ sprite03PausePalette6:
 sprite05PausePalette4:
         .byte   $00,$19,$00,$00,$00,$0A,$00,$08
         .byte   $00,$1E,$00,$10,$00,$1C,$00,$18
         .byte   $00,$0E,$00,$20,$FF
 sprite06TPiece:
-        .byte   $00,$7B,$02,$FC,$00,$7B,$02,$04
-        .byte   $00,$7B,$02,$0C,$08,$7B,$02,$04
+.ifndef NEXT_ON_TOP
+        .byte   $00,$7B,$01,$FC,$00,$7B,$01,$04
+        .byte   $00,$7B,$01,$0C,$08,$7B,$01,$04
+.else
+        .byte   $00,$7B,$01,$00,$00,$7B,$01,$08
+        .byte   $00,$7B,$01,$10,$08,$7B,$01,$08
+.endif
         .byte   $FF
 sprite07SPiece:
-        .byte   $00,$7D,$02,$04,$00,$7D,$02,$0C
-        .byte   $08,$7D,$02,$FC,$08,$7D,$02,$04
+.ifndef NEXT_ON_TOP
+        .byte   $00,$7D,$01,$04,$00,$7D,$01,$0C
+        .byte   $08,$7D,$01,$FC,$08,$7D,$01,$04
+.else
+        .byte   $00,$7D,$01,$08,$00,$7D,$01,$10
+        .byte   $08,$7D,$01,$00,$08,$7D,$01,$08
+.endif
         .byte   $FF
 sprite08ZPiece:
-        .byte   $00,$7C,$02,$FC,$00,$7C,$02,$04
-        .byte   $08,$7C,$02,$04,$08,$7C,$02,$0C
+.ifndef NEXT_ON_TOP
+        .byte   $00,$7C,$01,$FC,$00,$7C,$01,$04
+        .byte   $08,$7C,$01,$04,$08,$7C,$01,$0C
+.else
+        .byte   $00,$7C,$01,$00,$00,$7C,$01,$08
+        .byte   $08,$7C,$01,$08,$08,$7C,$01,$10
+.endif
         .byte   $FF
 sprite09JPiece:
-        .byte   $00,$7D,$02,$FC,$00,$7D,$02,$04
-        .byte   $00,$7D,$02,$0C,$08,$7D,$02,$0C
+.ifndef NEXT_ON_TOP
+        .byte   $00,$7D,$01,$FC,$00,$7D,$01,$04
+        .byte   $00,$7D,$01,$0C,$08,$7D,$01,$0C
+.else
+        .byte   $00,$7D,$01,$00,$00,$7D,$01,$08
+        .byte   $00,$7D,$01,$10,$08,$7D,$01,$10
+.endif
         .byte   $FF
 sprite0ALPiece:
-        .byte   $00,$7C,$02,$FC,$00,$7C,$02,$04
-        .byte   $00,$7C,$02,$0C,$08,$7C,$02,$FC
+.ifndef NEXT_ON_TOP
+        .byte   $00,$7C,$01,$FC,$00,$7C,$01,$04
+        .byte   $00,$7C,$01,$0C,$08,$7C,$01,$FC
+.else
+        .byte   $00,$7C,$01,$00,$00,$7C,$01,$08
+        .byte   $00,$7C,$01,$10,$08,$7C,$01,$00
+.endif
         .byte   $FF
 sprite0BOPiece:
-        .byte   $00,$7B,$02,$00,$00,$7B,$02,$08
-        .byte   $08,$7B,$02,$00,$08,$7B,$02,$08
+        .byte   $00,$7B,$01,$00,$00,$7B,$01,$08
+        .byte   $08,$7B,$01,$00,$08,$7B,$01,$08
         .byte   $FF
 sprite0CIPiece:
-        .byte   $04,$7B,$02,$F8,$04,$7B,$02,$00
-        .byte   $04,$7B,$02,$08,$04,$7B,$02,$10
+        .byte   $04,$7B,$01,$F8,$04,$7B,$01,$00
+        .byte   $04,$7B,$01,$08,$04,$7B,$01,$10
         .byte   $FF
 sprite0EHighScoreNameCursor:
         .byte   $00,$FC,$21,$00,$FF
 ; Unused, but referenced from unreferenced_orientationToSpriteTable
 sprite0FTPieceOffset:
@@ -2359,20 +2443,38 @@ render_mode_play_and_demo:
         lda     #$00
         sta     player1_vramRow
         jmp     @renderPlayer2Playfield
 
 @playStateNotDisplayLineClearingAnimation:
+; 0 for original. 1 for fast. 2 for fast row4
+.define FASTROWTOVRAM 2
+.if FASTROWTOVRAM <> 2
         lda     player1_vramRow
         sta     vramRow
         lda     #$04
         sta     playfieldAddr+1
+.if FASTROWTOVRAM = 0
         jsr     copyPlayfieldRowToVRAM
         jsr     copyPlayfieldRowToVRAM
         jsr     copyPlayfieldRowToVRAM
         jsr     copyPlayfieldRowToVRAM
+.else
+        .import copyPlayfieldRowToVRAM_fast
+        jsr     copyPlayfieldRowToVRAM_fast
+        jsr     copyPlayfieldRowToVRAM_fast
+        jsr     copyPlayfieldRowToVRAM_fast
+        jsr     copyPlayfieldRowToVRAM_fast
+.endif
         lda     vramRow
         sta     player1_vramRow
+.else
+        ldx     player1_vramRow
+        lda     #$00
+        .import copyPlayfieldRowToVRAM4
+        jsr     copyPlayfieldRowToVRAM4
+        stx     player1_vramRow
+.endif
 @renderPlayer2Playfield:
         lda     numberOfPlayers
         cmp     #$02
         bne     @renderLines
         lda     player2_playState
@@ -2400,20 +2502,34 @@ @renderPlayer2Playfield:
         lda     #$00
         sta     player2_vramRow
         jmp     @renderLines
 
 @player2PlayStateNotDisplayLineClearingAnimation:
+.if FASTROWTOVRAM <> 2
         lda     player2_vramRow
         sta     vramRow
         lda     #$05
         sta     playfieldAddr+1
+.if FASTROWTOVRAM = 0
         jsr     copyPlayfieldRowToVRAM
         jsr     copyPlayfieldRowToVRAM
         jsr     copyPlayfieldRowToVRAM
         jsr     copyPlayfieldRowToVRAM
+.else
+        jsr     copyPlayfieldRowToVRAM_fast
+        jsr     copyPlayfieldRowToVRAM_fast
+        jsr     copyPlayfieldRowToVRAM_fast
+        jsr     copyPlayfieldRowToVRAM_fast
+.endif
         lda     vramRow
         sta     player2_vramRow
+.else
+        ldx     player2_vramRow
+        lda     #$01
+        jsr     copyPlayfieldRowToVRAM4
+        stx     player2_vramRow
+.endif
 @renderLines:
         lda     outOfDateRenderFlags
         and     #$01
         beq     @renderLevel
         lda     numberOfPlayers
@@ -2431,36 +2547,36 @@ @renderLines:
         and     #$FE
         sta     outOfDateRenderFlags
         jmp     @renderLevel
 
 @renderLinesTwoPlayers:
-        lda     #$20
+        lda     #>INGAME_LAYOUT_P1_LINES
         sta     PPUADDR
-        lda     #$68
+        lda     #<INGAME_LAYOUT_P1_LINES
         sta     PPUADDR
         lda     player1_lines+1
         sta     PPUDATA
         lda     player1_lines
         jsr     twoDigsToPPU
-        lda     #$20
+        lda     #>INGAME_LAYOUT_P2_LINES
         sta     PPUADDR
-        lda     #$7A
+        lda     #<INGAME_LAYOUT_P2_LINES
         sta     PPUADDR
         lda     player2_lines+1
         sta     PPUDATA
         lda     player2_lines
         jsr     twoDigsToPPU
         lda     outOfDateRenderFlags
         and     #$FE
         sta     outOfDateRenderFlags
 @renderLevel:
-        lda     outOfDateRenderFlags
-        and     #$02
-        beq     @renderScore
         lda     numberOfPlayers
         cmp     #$02
         beq     @renderScore
+        lda     outOfDateRenderFlags
+        and     #$02
+        beq     @renderScore
         ldx     player1_levelNumber
         lda     levelDisplayTable,x
         sta     generalCounter
         lda     #$22
         sta     PPUADDR
@@ -2471,12 +2587,17 @@ @renderLevel:
         jsr     updatePaletteForLevel
         lda     outOfDateRenderFlags
         and     #$FD
         sta     outOfDateRenderFlags
 @renderScore:
-        lda     numberOfPlayers
-        cmp     #$02
+        ;lda     numberOfPlayers
+        ;cmp     #$02
+        .import renderPlay_mod
+        jmp     renderPlay_mod
+        nop
+.export after_renderPlay_mod
+after_renderPlay_mod:
         beq     @renderStats
         lda     outOfDateRenderFlags
         and     #$04
         beq     @renderStats
         lda     #$21
@@ -2524,13 +2645,14 @@ @renderTetrisFlashAndSound:
         lda     #$3F
         sta     PPUADDR
         lda     #$0E
         sta     PPUADDR
         ldx     #$00
-        lda     completedLines
-        cmp     #$04
-        bne     @setPaletteColor
+        lda     player1_completedLines
+        ora     player2_completedLines
+        and     #$04
+        beq     @setPaletteColor
         lda     frameCounter
         and     #$03
         bne     @setPaletteColor
         ldx     #$30
         lda     frameCounter
@@ -2539,17 +2661,28 @@ @renderTetrisFlashAndSound:
         lda     #$09
         sta     soundEffectSlot1Init
 @setPaletteColor:
         stx     PPUDATA
         ldy     #$00
-        sty     ppuScrollX
+        ;sty     ppuScrollX
         sty     PPUSCROLL
-        ldy     #$00
-        sty     ppuScrollY
+        ;ldy     #$00
+        ;sty     ppuScrollY
         sty     PPUSCROLL
         rts
 
+        nop
+        nop
+        nop
+        nop
+
+.if FASTROWTOVRAM = 2
+.repeat 2*15
+        nop
+.endrepeat
+.endif
+
 pieceToPpuStatAddr:
         .dbyt   $2186,$21C6,$2206,$2246
         .dbyt   $2286,$22C6,$2306
 levelDisplayTable:
         .byte   $00,$01,$02,$03,$04,$05,$06,$07
@@ -2559,63 +2692,74 @@ levelDisplayTable:
 multBy10Table:
         .byte   $00,$0A,$14,$1E,$28,$32,$3C,$46
         .byte   $50,$5A,$64,$6E,$78,$82,$8C,$96
         .byte   $A0,$AA,$B4,$BE
 ; addresses
-vramPlayfieldRows:
-        .word   $20C6,$20E6,$2106,$2126
-        .word   $2146,$2166,$2186,$21A6
-        .word   $21C6,$21E6,$2206,$2226
-        .word   $2246,$2266,$2286,$22A6
-        .word   $22C6,$22E6,$2306,$2326
+vramPlayfieldRowsHi:
+        .export vramPlayfieldRowsHi
+        .byte   >$20C6,>$20E6,>$2106,>$2126
+        .byte   >$2146,>$2166,>$2186,>$21A6
+        .byte   >$21C6,>$21E6,>$2206,>$2226
+        .byte   >$2246,>$2266,>$2286,>$22A6
+        .byte   >$22C6,>$22E6,>$2306,>$2326
+vramPlayfieldRowsLo:
+        .export vramPlayfieldRowsLo
+        .byte   <$20C6,<$20E6,<$2106,<$2126
+        .byte   <$2146,<$2166,<$2186,<$21A6
+        .byte   <$21C6,<$21E6,<$2206,<$2226
+        .byte   <$2246,<$2266,<$2286,<$22A6
+        .byte   <$22C6,<$22E6,<$2306,<$2326
 twoDigsToPPU:
-        sta     generalCounter
+        tax
         and     #$F0
         lsr     a
         lsr     a
         lsr     a
         lsr     a
         sta     PPUDATA
-        lda     generalCounter
+        txa
         and     #$0F
         sta     PPUDATA
         rts
 
+        nop
+        nop
+
 copyPlayfieldRowToVRAM:
         ldx     vramRow
         cpx     #$15
         bpl     @ret
         lda     multBy10Table,x
         tay
-        txa
-        asl     a
-        tax
-        inx
-        lda     vramPlayfieldRows,x
+        nop     ;txa
+        nop     ;asl     a
+        nop     ;tax
+        nop     ;inx
+        lda     vramPlayfieldRowsHi,x
         sta     PPUADDR
-        dex
+        nop     ;dex
         lda     numberOfPlayers
         cmp     #$01
         beq     @onePlayer
         lda     playfieldAddr+1
         cmp     #$05
         beq     @playerTwo
-        lda     vramPlayfieldRows,x
+        lda     vramPlayfieldRowsLo,x
         sec
-        sbc     #$02
+        sbc     #$04
         sta     PPUADDR
         jmp     @copyRow
 
 @playerTwo:
-        lda     vramPlayfieldRows,x
+        lda     vramPlayfieldRowsLo,x
         clc
-        adc     #$0C
+        adc     #$0E
         sta     PPUADDR
         jmp     @copyRow
 
 @onePlayer:
-        lda     vramPlayfieldRows,x
+        lda     vramPlayfieldRowsLo,x
         clc
         adc     #$06
         sta     PPUADDR
 @copyRow:
         ldx     #$0A
@@ -2639,15 +2783,15 @@ updateLineClearingAnimation:
         bne     @ret
         lda     #$00
         sta     generalCounter3
 @whileCounter3LessThan4:
         ldx     generalCounter3
-        lda     completedRow,x
+        ldy     completedRow,x
         beq     @nextRow
-        asl     a
-        tay
-        lda     vramPlayfieldRows,y
+        nop     ;asl     a
+        nop     ;tay
+        lda     vramPlayfieldRowsLo,y
         sta     generalCounter
         lda     numberOfPlayers
         cmp     #$01
         bne     @twoPlayers
         lda     generalCounter
@@ -2660,22 +2804,22 @@ @twoPlayers:
         lda     playfieldAddr+1
         cmp     #$04
         bne     @player2
         lda     generalCounter
         sec
-        sbc     #$02
+        sbc     #$04
         sta     generalCounter
         jmp     @updateVRAM
 
 @player2:
         lda     generalCounter
         clc
-        adc     #$0C
+        adc     #$0E
         sta     generalCounter
 @updateVRAM:
-        iny
-        lda     vramPlayfieldRows,y
+        nop     ;iny
+        lda     vramPlayfieldRowsHi,y
         sta     generalCounter2
         sta     PPUADDR
         ldx     rowY
         lda     leftColumns,x
         clc
@@ -2709,45 +2853,47 @@ leftColumns:
 rightColumns:
         .byte   $05,$06,$07,$08,$09
 ; Set Background palette 2 and Sprite palette 2
 updatePaletteForLevel:
         lda     player1_levelNumber
-@mod10: cmp     #$0A
-        bmi     @copyPalettes
+        ldy     #$04
+.export updatePaletteForLevel_postConf
+updatePaletteForLevel_postConf:
         sec
+@mod10:
         sbc     #$0A
-        jmp     @mod10
+        bcs     @mod10
+        adc     #$0A
 
 @copyPalettes:
         asl     a
         asl     a
         tax
-        lda     #$00
-        sta     generalCounter
 @copyPalette:
         lda     #$3F
         sta     PPUADDR
-        lda     #$08
-        clc
-        adc     generalCounter
-        sta     PPUADDR
+        sty     PPUADDR
         lda     colorTable,x
         sta     PPUDATA
         lda     colorTable+1,x
         sta     PPUDATA
         lda     colorTable+1+1,x
         sta     PPUDATA
         lda     colorTable+1+1+1,x
         sta     PPUDATA
-        lda     generalCounter
+        tya
         clc
         adc     #$10
-        sta     generalCounter
+        tay
         cmp     #$20
-        bne     @copyPalette
+        bmi     @copyPalette
         rts
 
+.repeat 12
+        nop
+.endrepeat
+
 ; 4 bytes per level (bg, fg, c3, c4)
 colorTable:
         .dbyt   $0F30,$2112,$0F30,$291A
         .dbyt   $0F30,$2414,$0F30,$2A12
         .dbyt   $0F30,$2B15,$0F30,$222B
@@ -2774,11 +2920,12 @@ @ret:   rts
 
 playState_spawnNextTetrimino:
         lda     vramRow
         cmp     #$20
         bmi     @ret
-        lda     numberOfPlayers
+        ;lda     numberOfPlayers
+        lda     #$01
         cmp     #$01
         beq     @notDelaying
         lda     twoPlayerPieceDelayCounter
         cmp     #$00
         bne     @twoPlayerPieceDelay
@@ -2803,79 +2950,89 @@ @notDelaying:
         sta     tetriminoY
         lda     #$01
         sta     playState
         lda     #$05
         sta     tetriminoX
-        ldx     nextPiece
+        ldx     nextPiece_
         lda     spawnOrientationFromOrientation,x
         sta     currentPiece
+.ifndef TOURNAMENT_MODE
         jsr     incrementPieceStat
-        lda     numberOfPlayers
+.else
+        .import statsPerBlock_tournamentMode
+        jsr     statsPerBlock_tournamentMode
+.endif
+        ;lda     numberOfPlayers
+        lda     #$01
         cmp     #$01
         beq     @onePlayerPieceSelection
         lda     nextPiece_2player
         sta     nextPiece
         jmp     @resetDownHold
 
 @onePlayerPieceSelection:
         jsr     chooseNextTetrimino
-        sta     nextPiece
+        sta     nextPiece_
 @resetDownHold:
         lda     #$00
         sta     autorepeatY
 @ret:   rts
 
 chooseNextTetrimino:
         lda     gameMode
         cmp     #$05
         bne     pickRandomTetrimino
-        ldx     demoIndex
-        inc     demoIndex
+        .import chooseNextTetrimino_mod ; ldx     demoIndex
+        jsr     chooseNextTetrimino_mod ; inc     demoIndex
+        nop
         lda     demoTetriminoTypeTable,x
         lsr     a
         lsr     a
         lsr     a
         lsr     a
         and     #$07
         tax
         lda     spawnTable,x
         rts
-
 pickRandomTetrimino:
-        jsr     @realStart
-        rts
+        ;jsr     @realStart
+        ;rts
+        .import pickRandomTetrimino_mod
+        jsr     pickRandomTetrimino_mod
+        nop
 
 @realStart:
-        inc     spawnCount
-        lda     rng_seed
+        inc     spawnCount_
+        lda     personal_rng
         clc
-        adc     spawnCount
+        adc     spawnCount_
         and     #$07
         cmp     #$07
         beq     @invalidIndex
         tax
         lda     spawnTable,x
-        cmp     spawnID
+        cmp     spawnID_
         bne     useNewSpawnID
 @invalidIndex:
-        ldx     #$17
+        ;ldx     #$17
+        ldx     #personal_rng
         ldy     #$02
         jsr     generateNextPseudorandomNumber
-        lda     rng_seed
+        lda     personal_rng
         and     #$07
         clc
-        adc     spawnID
+        adc     spawnID_
 L992A:  cmp     #$07
         bcc     L9934
         sec
         sbc     #$07
         jmp     L992A
 
 L9934:  tax
         lda     spawnTable,x
 useNewSpawnID:
-        sta     spawnID
+        sta     spawnID_
         rts
 
 tetriminoTypeFromOrientation:
         .byte   $00,$00,$00,$00,$01,$01,$01,$01
         .byte   $02,$02,$03,$04,$04,$05,$05,$05
@@ -3035,12 +3192,15 @@ @checkForStartButton:
         lda     newlyPressedButtons_player1
         cmp     #$10
         bne     @ret2
 @exitGame:
         lda     #$00
-        sta     playState
-        sta     newlyPressedButtons_player1
+        ;sta     playState
+        ;sta     newlyPressedButtons_player1
+        .import playState_updateGameOverCurtain_curtainFinished_mod
+        jsr     playState_updateGameOverCurtain_curtainFinished_mod
+        nop
 @ret2:  rts
 
 playState_checkForCompletedRows:
         lda     vramRow
         cmp     #$20
@@ -3135,11 +3295,12 @@ @ret:   rts
 
 playState_receiveGarbage:
         lda     numberOfPlayers
         cmp     #$01
         beq     L9B50
-        ldy     totalGarbageInactivePlayer
+        ;ldy     totalGarbageInactivePlayer
+        bne     L9B50
         beq     L9B50
         lda     vramRow
         cmp     #$20
         bmi     L9B52
         lda     multBy10Table,y
@@ -3161,11 +3322,11 @@ L9B31:  cpx     garbageHole
         beq     @garbageEmptySpace
         lda     #$78
         jmp     @placeGarbage
 
 @garbageEmptySpace:
-        lda     #$FF
+        lda     #$EF
 @placeGarbage:
         sta     (playfieldAddr),y
         inx
         cpx     #$0A
         bne     L9B45
@@ -3349,26 +3510,39 @@ L9C75:  lda     score+2
         clc
         adc     #$06
         sta     score+2
 L9C84:  lda     score+2
         and     #$F0
+.ifdef TOURNAMENT_MODE
+        ;this basically is no real fix, it just disables the check
+        cmp     #$FF
+.else
         cmp     #$A0
+.endif
         bcc     L9C94
         lda     #$99
         sta     score
         sta     score+1
         sta     score+2
 L9C94:  dec     generalCounter
         bne     L9C37
         lda     outOfDateRenderFlags
         ora     #$04
         sta     outOfDateRenderFlags
+.ifdef TOURNAMENT_MODE
+        .import statsPerLineClear_tournamentMode
+        jmp statsPerLineClear_tournamentMode
+        nop
+        nop ;inc     playState
+        nop
+        nop ;rts
+.else
         lda     #$00
         sta     completedLines
         inc     playState
         rts
-
+.endif
 pointsTable:
         .word   $0000,$0040,$0100,$0300
         .word   $1200
 updatePlayfield:
         ldx     tetriminoY
@@ -3396,11 +3570,12 @@ gameModeState_handleGameOver:
         sta     generalCounter2
         lda     player2_playState
         cmp     #$00
         bne     @ret
 @gameOver:
-        lda     numberOfPlayers
+        ;lda     numberOfPlayers
+        lda     #$01
         cmp     #$01
         beq     @onePlayerGameOver
         lda     #$09
         sta     gameModeState
         rts
@@ -3445,23 +3620,31 @@ @checkForBlockInRow:
         bne     @foundBlockInRow
         iny
         dex
         bne     @checkForBlockInRow
         lda     allegro
-        beq     @ret
-        lda     #$00
-        sta     allegro
+        ;beq     @ret
+        ;lda     #$00
+        ;sta     allegro
+        .import updateMusicSpeed_noBlockInRow_mod
+        jsr     updateMusicSpeed_noBlockInRow_mod
+        bne     @ret
+        nop
         ldx     musicType
         lda     musicSelectionTable,x
         jsr     setMusicTrack
         jmp     @ret
 
 @foundBlockInRow:
         lda     allegro
+        ;bne     @ret
+        ;lda     #$FF
+        ;sta     allegro
+        .import updateMusicSpeed_foundBlockInRow_mod
+        jsr     updateMusicSpeed_foundBlockInRow_mod
         bne     @ret
-        lda     #$FF
-        sta     allegro
+        nop
         lda     musicType
         clc
         adc     #$04
         tax
         lda     musicSelectionTable,x
@@ -3477,19 +3660,19 @@ pollControllerButtons:
 
 @demoGameMode:
         lda     demo_recording
         cmp     #$FF
         beq     @recording
-        jsr     pollController
+        .import demo_pollController_mod
+        jmp     demo_pollController_mod
         lda     newlyPressedButtons_player1
-        cmp     #$10
+@demo_pollController_mod_after: cmp     #$10
         beq     @startButtonPressed
-        lda     demo_repeats
+@demo_pollController_mod_skip:  lda     demo_repeats
         beq     @finishedMove
         dec     demo_repeats
         jmp     @moveInProgress
-
 @finishedMove:
         ldx     #$00
         lda     (demoButtonsAddr,x)
         sta     generalCounter
         jsr     demoButtonsTable_indexIncr
@@ -3830,11 +4013,11 @@ L9FE9:  ldy     #$00
         sty     PPUSCROLL
         sty     PPUSCROLL
         rts
 
 showHighScores:
-        lda     numberOfPlayers
+        lda     #$01
         cmp     #$01
         beq     L9FFB
         jmp     LA085
 
 L9FFB:  jsr     bulkCopyToPpu
@@ -3927,11 +4110,11 @@ byteToBcdTable:
         .byte   $16,$17,$18,$19,$20,$21,$22,$23
         .byte   $24,$25,$26,$27,$28,$29,$30,$31
         .byte   $32,$33,$34,$35,$36,$37,$38,$39
         .byte   $40,$41,$42,$43,$44,$45,$46,$47
         .byte   $48,$49
-; Adjusts high score table and handles data entry, if necessary
+; Adjusts high score table and handles data entry, if necessary; x comes from gameModeState_handleGameOver_mod
 handleHighScoreIfNecessary:
         lda     #$00
         sta     highScoreEntryRawPos
         lda     gameType
         beq     @compareWithPos
@@ -3943,26 +4126,26 @@ @compareWithPos:
         asl     a
         clc
         adc     generalCounter2
         tay
         lda     highScoreScoresA,y
-        cmp     player1_score+2
+        cmp     player1_score+2,x
         beq     @checkHundredsByte
         bcs     @tooSmall
         bcc     adjustHighScores
 @checkHundredsByte:
         iny
         lda     highScoreScoresA,y
-        cmp     player1_score+1
+        cmp     player1_score+1,x
         beq     @checkOnesByte
         bcs     @tooSmall
         bcc     adjustHighScores
 ; This breaks ties by prefering the new score
 @checkOnesByte:
         iny
         lda     highScoreScoresA,y
-        cmp     player1_score
+        cmp     player1_score,x
         beq     adjustHighScores
         bcc     adjustHighScores
 @tooSmall:
         inc     highScoreEntryRawPos
         lda     highScoreEntryRawPos
@@ -4005,22 +4188,22 @@ @clearNameLetter:
         inx
         dey
         bne     @clearNameLetter
         ldx     highScoreEntryRawPos
         lda     highScoreIndexToHighScoreScoresOffset,x
-        tax
-        lda     player1_score+2
-        sta     highScoreScoresA,x
-        inx
-        lda     player1_score+1
-        sta     highScoreScoresA,x
-        inx
-        lda     player1_score
-        sta     highScoreScoresA,x
+        tay     ; swapped to y
+        ldx     tmp3                    ; player offset
+        lda     player1_score+2,x
+        sta     highScoreScoresA,y      ; removed inx from next line
+        lda     player1_score+1,x
+        sta     highScoreScoresA+1,y
+        ;inx
+        lda     player1_score,x
+        sta     highScoreScoresA+2,y
         ldx     highScoreEntryRawPos
-        lda     player1_levelNumber
-        sta     highScoreLevels,x
+        lda     player1_levelNumber,x
+        sta     highScoreLevels,y
         jmp     highScoreEntryScreen
 
 ; reg a: start byte to copy
 copyHighScoreNameToNextIndex:
         sta     generalCounter
@@ -4083,11 +4266,11 @@ copyHighScoreLevelToNextIndex:
         tax
 @xAdjustedForGameType:
         lda     highScoreLevels,x
         sta     highScoreLevels+1,x
         rts
-
+.import highScoreEntryScreen_render
 highScoreIndexToHighScoreNamesOffset:
         .byte   $00,$06,$0C,$12,$18,$1E,$24,$2A
 highScoreIndexToHighScoreScoresOffset:
         .byte   $00,$03,$06,$09,$0C,$0F,$12,$15
 highScoreEntryScreen:
@@ -4117,11 +4300,11 @@ highScoreEntryScreen:
         adc     gameType
         sta     PPUDATA
         jsr     showHighScores
         lda     #$02
         sta     renderMode
-        jsr     waitForVBlankAndEnableNmi
+        jsr     highScoreEntryScreen_render ; jsr     waitForVBlankAndEnableNmi
         jsr     updateAudioWaitForNmiAndResetOamStaging
         jsr     updateAudioWaitForNmiAndEnablePpuRendering
         jsr     updateAudioWaitForNmiAndResetOamStaging
         lda     highScoreEntryRawPos
         asl     a
@@ -4150,20 +4333,20 @@ @renderFrame:
         and     #$03
         bne     @flickerStateSelected_checkForStartPressed
         lda     #$02
         sta     spriteIndexInOamContentLookup
 @flickerStateSelected_checkForStartPressed:
-        jsr     loadSpriteIntoOamStaging
-        lda     newlyPressedButtons_player1
+        .import highScoreEntryScreen_get_player ; loads player id (0 or 1) into x
+        jsr     highScoreEntryScreen_get_player ; jsr     loadSpriteIntoOamStaging
+        lda     newlyPressedButtons_player1,x
         and     #$10
         beq     @checkForAOrRightPressed
         lda     #$02
         sta     soundEffectSlot1Init
         jmp     @ret
-
 @checkForAOrRightPressed:
-        lda     newlyPressedButtons_player1
+        lda     newlyPressedButtons_player1,x
         and     #$81
         beq     @checkForBOrLeftPressed
         lda     #$01
         sta     soundEffectSlot1Init
         inc     highScoreEntryNameOffsetForLetter
@@ -4171,22 +4354,22 @@ @checkForAOrRightPressed:
         cmp     #$06
         bmi     @checkForBOrLeftPressed
         lda     #$00
         sta     highScoreEntryNameOffsetForLetter
 @checkForBOrLeftPressed:
-        lda     newlyPressedButtons_player1
+        lda     newlyPressedButtons_player1,x
         and     #$42
         beq     @checkForDownPressed
         lda     #$01
         sta     soundEffectSlot1Init
         dec     highScoreEntryNameOffsetForLetter
         lda     highScoreEntryNameOffsetForLetter
         bpl     @checkForDownPressed
         lda     #$05
         sta     highScoreEntryNameOffsetForLetter
 @checkForDownPressed:
-        lda     heldButtons_player1
+        lda     heldButtons_player1,x
         and     #$04
         beq     @checkForUpPressed
         lda     frameCounter
         and     #$07
         bne     @checkForUpPressed
@@ -4194,24 +4377,24 @@ @checkForDownPressed:
         sta     soundEffectSlot1Init
         lda     highScoreEntryNameOffsetForRow
         sta     generalCounter
         clc
         adc     highScoreEntryNameOffsetForLetter
-        tax
-        lda     highScoreNames,x
+        tay
+        lda     highScoreNames,y
         sta     generalCounter
         dec     generalCounter
         lda     generalCounter
         bpl     @letterDoesNotUnderflow
         clc
         adc     #$2C
         sta     generalCounter
 @letterDoesNotUnderflow:
         lda     generalCounter
-        sta     highScoreNames,x
+        sta     highScoreNames,y
 @checkForUpPressed:
-        lda     heldButtons_player1
+        lda     heldButtons_player1,x
         and     #$08
         beq     @waitForVBlank
         lda     frameCounter
         and     #$07
         bne     @waitForVBlank
@@ -4298,15 +4481,15 @@ gameModeState_startButtonHandling:
 
 @checkIfInGame:
         lda     renderMode
         cmp     #$03
         bne     @ret
-        lda     newlyPressedButtons_player1
-        and     #$10
-        bne     @startPressed
+        .import isStartNewlyPressed
+        nop                             ;lda     newlyPressedButtons_player1
+        jsr     isStartNewlyPressed     ;and     #$10
+        beq     @startPressed           ;bne     @startPressed
         jmp     @ret
-
 ; Do nothing if curtain is being lowered
 @startPressed:
         lda     player1_playState
         cmp     #$0A
         bne     @pause
@@ -4329,12 +4512,12 @@ @pauseLoop:
         lda     #$77
         sta     spriteYOffset
         lda     #$05
         sta     spriteIndexInOamContentLookup
         jsr     loadSpriteIntoOamStaging
-        lda     newlyPressedButtons_player1
-        cmp     #$10
+        nop                             ;lda     newlyPressedButtons_player1
+        jsr     isStartNewlyPressed     ;cmp     #$10
         beq     @resume
         jsr     updateAudioWaitForNmiAndResetOamStaging
         jmp     @pauseLoop
 
 @resume:lda     #$1E
@@ -6211,17 +6394,17 @@ dmc1:   .byte   $6D,$6E,$6F,$5F,$3C,$33,
         .byte   $87,$78,$84,$7A,$77,$87,$78,$84
         .byte   $7A,$67,$87,$77,$87,$77,$72,$83
         .byte   $80,$81,$77,$67,$82,$79,$7A,$67
         .byte   $77,$78,$83,$72,$7A,$67,$23,$C0
         .byte   $20,$FF,$FF,$FF,$FF,$FF,$FF,$FF
-        .byte   $FF,$FF,$FF,$FF,$AF,$AF,$EF,$FF
-        .byte   $FF,$BF,$2F,$CF,$AA,$AA,$EE,$FF
-        .byte   $FF,$BB,$22,$CC,$AA,$AA,$EE,$FF
-        .byte   $FF,$23,$E0,$20,$BB,$22,$CC,$AA
-        .byte   $AA,$EE,$FF,$FF,$BB,$22,$CC,$AA
-        .byte   $AA,$EE,$FF,$FF,$FB,$F2,$FC,$FA
-        .byte   $FA,$FE,$FF,$FF,$0F,$0F,$0F,$0F
+        .byte   $FF,$FF,$FF,$FF,$5F,$5F,$DF,$FF
+        .byte   $FF,$7F,$1F,$CF,$55,$55,$DD,$FF
+        .byte   $FF,$77,$11,$CC,$55,$55,$DD,$FF
+        .byte   $FF,$23,$E0,$20,$77,$11,$CC,$55
+        .byte   $55,$DD,$FF,$FF,$77,$11,$CC,$55
+        .byte   $55,$DD,$FF,$FF,$F7,$F1,$FC,$F5
+        .byte   $F5,$FD,$FF,$FF,$0F,$0F,$0F,$0F
         .byte   $0F,$0F,$0F,$0F,$FF
 enter_high_score_nametable:
         .byte   $20,$00,$20,$72,$82,$62,$62,$62
         .byte   $80,$91,$80,$43,$83,$62,$72,$60
         .byte   $61,$82,$90,$83,$72,$90,$81,$83
