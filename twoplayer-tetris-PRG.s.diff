--- orig
+++ mod
@@ -33,10 +33,18 @@ score           := $0053
 completedLines  := $0056
 lineIndex       := $0057                        ; Iteration count of playState_checkForCompletedRows
 curtainRow      := $0058
 startHeight     := $0059
 garbageHole     := $005A                        ; Position of hole in received garbage
+nextPiece_      := $005B
+.exportzp nextPiece_
+personal_rng    := $005C        ; size 2
+.exportzp personal_rng
+spawnID_        := $005E
+.exportzp spawnID_
+spawnCount_        := $005F
+.exportzp spawnCount_
 player1_tetriminoX:= $0060
 player1_tetriminoY:= $0061
 player1_currentPiece:= $0062
 player1_levelNumber:= $0064
 player1_fallTimer:= $0065
@@ -52,10 +60,16 @@ player1_rowY    := $0072
 player1_score   := $0073
 player1_completedLines:= $0076
 player1_curtainRow:= $0078
 player1_startHeight:= $0079
 player1_garbageHole:= $007A
+player1_nextPiece:= $007B
+.exportzp player1_nextPiece
+player1_rng    := $007C        ; size 2
+.exportzp player1_rng
+player1_spawnID_:= $007E
+player1_spawnCount_:= $007F
 player2_tetriminoX:= $0080
 player2_tetriminoY:= $0081
 player2_currentPiece:= $0082
 player2_levelNumber:= $0084
 player2_fallTimer:= $0085
@@ -71,10 +85,16 @@ player2_rowY    := $0092
 player2_score   := $0093
 player2_completedLines:= $0096
 player2_curtainRow:= $0098
 player2_startHeight:= $0099
 player2_garbageHole:= $009A
+player2_nextPiece:= $009B
+.exportzp player2_nextPiece
+player2_rng    := $009C        ; size 2
+.exportzp player2_rng
+player2_spawnID_:= $009E
+player2_spawnCount_:= $009F
 spriteXOffset   := $00A0
 spriteYOffset   := $00A1
 spriteIndexInOamContentLookup:= $00A2
 outOfDateRenderFlags:= $00A3                    ; Bit 0-lines 1-level 2-score 6-stats 7-high score entry letter
 twoPlayerPieceDelayCounter:= $00A4              ; 0 is not delaying
@@ -426,22 +446,25 @@ branchOnGameMode:
 gameModeState_updatePlayer1:
         jsr     makePlayer1Active
         jsr     branchOnPlayStatePlayer1
         jsr     stageSpriteForCurrentPiece
         jsr     savePlayer1State
-        jsr     stageSpriteForNextPiece
+        ;jsr     stageSpriteForNextPiece
+        .import stageSpriteForNextPiece_player1_mod
+        jsr     stageSpriteForNextPiece_player1_mod
         inc     gameModeState
         rts
 
 gameModeState_updatePlayer2:
         lda     numberOfPlayers
         cmp     #$02
         bne     @ret
         jsr     makePlayer2Active
         jsr     branchOnPlayStatePlayer2
         jsr     stageSpriteForCurrentPiece
-        jsr     savePlayer2State
+        .import savePlayer2State_mod
+        jsr     savePlayer2State_mod
 @ret:   inc     gameModeState
         rts
 
 gameMode_playAndEndingHighScore:
         lda     gameModeState
@@ -517,11 +540,12 @@ gameMode_legalScreen:
         jsr     updateAudioWaitForNmiAndResetOamStaging
         lda     #$00
         ldx     #$02
         ldy     #$02
         jsr     memset_page
-        lda     #$FF
+        ; TODO: split into separate mod file
+        lda     #$00
         jsr     sleep_for_a_vblanks
         lda     #$FF
         sta     generalCounter
 @waitForStartButton:
         lda     newlyPressedButtons_player1
@@ -753,12 +777,16 @@ gameMode_levelMenu:
         jsr     changeCHRBank0
         lda     #$00
         jsr     changeCHRBank1
         jsr     bulkCopyToPpu
         .addr   menu_palette
-        jsr     bulkCopyToPpu
-        .addr   level_menu_nametable
+        ;jsr     bulkCopyToPpu
+        ;.addr   level_menu_nametable
+        .import gameMode_levelMenu_nametable_mod
+        jsr     gameMode_levelMenu_nametable_mod
+        nop
+        nop
         lda     gameType
         bne     @skipTypeBHeightDisplay
         jsr     bulkCopyToPpu
         .addr   height_menu_nametablepalette_patch
 @skipTypeBHeightDisplay:
@@ -814,12 +842,14 @@ gameMode_levelMenu_processPlayer1Navigat
 @startAndANotPressed:
         lda     #$00
         sta     gameModeState
         lda     #$02
         sta     soundEffectSlot1Init
-        inc     gameMode
-        rts
+        ;inc     gameMode
+        ;rts
+        .import gameMode_levelMenu_processPlayer2Navigation
+        jmp     gameMode_levelMenu_processPlayer2Navigation
 
 @checkBPressed:
         lda     newlyPressedButtons_player1
         cmp     #$40
         bne     @chooseRandomHole_player1
@@ -844,11 +874,13 @@ @chooseRandomHole_player2:
         lda     rng_seed
         and     #$0F
         cmp     #$0A
         bpl     @chooseRandomHole_player2
         sta     player2_garbageHole
-        jsr     updateAudioWaitForNmiAndResetOamStaging
+        ;jsr     updateAudioWaitForNmiAndResetOamStaging
+        .import gameMode_levelMenu_processPlayer1Navigation_processPlayer2
+        jmp     gameMode_levelMenu_processPlayer1Navigation_processPlayer2
         jmp     gameMode_levelMenu_processPlayer1Navigation
 
 ; Starts by checking if right pressed
 gameMode_levelMenu_handleLevelHeightNavigation:
         lda     newlyPressedButtons
@@ -1026,12 +1058,18 @@ gameModeState_initGameBackground:
         jsr     changeCHRBank0
         lda     #$03
         jsr     changeCHRBank1
         jsr     bulkCopyToPpu
         .addr   game_palette
-        jsr     bulkCopyToPpu
-        .addr   game_nametable
+        ;jsr     bulkCopyToPpu
+        ;.addr   game_nametable
+        .import initGameBackground_mod
+        jmp     initGameBackground_mod
+.export after_initGameBackground_mod_player1
+after_initGameBackground_mod_player1:
+        nop
+        nop
         lda     #$20
         sta     PPUADDR
         lda     #$83
         sta     PPUADDR
         lda     gameType
@@ -1088,10 +1126,12 @@ @endOfPpuPatching:
         lda     startHeight
         and     #$0F
         sta     PPUDATA
         jmp     gameModeState_initGameBackground_finish
 
+.export after_initGameBackground_mod_player2
+after_initGameBackground_mod_player2:
 gameModeState_initGameBackground_finish:
         jsr     waitForVBlankAndEnableNmi
         jsr     updateAudioWaitForNmiAndResetOamStaging
         jsr     updateAudioWaitForNmiAndEnablePpuRendering
         jsr     updateAudioWaitForNmiAndResetOamStaging
@@ -1113,12 +1153,14 @@ game_typeb_nametable_patch:
         .byte   $FE,$23,$57,$3D,$3E,$3E,$3E,$3E
         .byte   $3E,$3E,$3F,$FD
 gameModeState_initGameState:
         lda     #$EF
         ldx     #$04
-        ldy     #$04
-        jsr     memset_page
+        ldy     #$05
+        ;jsr     memset_page
+        .import initGameState_mod
+        jsr     initGameState_mod
         ldx     #$0F
         lda     #$00
 ; statsByType
 @initStatsByType:
         sta     $03EF,x
@@ -1166,16 +1208,17 @@ @initStatsByType:
         sta     player2_autorepeatY
         jsr     chooseNextTetrimino
         sta     player1_currentPiece
         sta     player2_currentPiece
         jsr     incrementPieceStat
-        ldx     #$17
+        ;ldx     #$17
+        ldx     #personal_rng
         ldy     #$02
         jsr     generateNextPseudorandomNumber
         jsr     chooseNextTetrimino
-        sta     nextPiece
-        sta     nextPiece_2player
+        sta     player1_nextPiece
+        sta     player2_nextPiece
         lda     gameType
         beq     @skipTypeBInit
         lda     #$25
         sta     player1_lines
         sta     player2_lines
@@ -1552,17 +1595,17 @@ stageSpriteForCurrentPiece:
         lda     numberOfPlayers
         cmp     #$01
         beq     L8A2C
         lda     generalCounter3
         sec
-        sbc     #$40
+        sbc     #$50
         sta     generalCounter3
         lda     activePlayer
         cmp     #$01
         beq     L8A2C
         lda     generalCounter3
-        adc     #$6F
+        adc     #$8F
         sta     generalCounter3
 L8A2C:  clc
         lda     tetriminoY
         rol     a
         rol     a
@@ -1596,11 +1639,12 @@ L8A4B:  lda     orientationTable,x
         lda     orientationTable,x
         sta     oamStaging,y
         inc     oamStagingLength
         iny
         inx
-        lda     #$02
+        ;lda     #$02
+        lda     activePlayer    ; palette
         sta     oamStaging,y
         lda     originalY
         cmp     #$2F
         bcs     L8A84
         inc     oamStagingLength
@@ -1882,36 +1926,36 @@ sprite03PausePalette6:
 sprite05PausePalette4:
         .byte   $00,$19,$00,$00,$00,$0A,$00,$08
         .byte   $00,$1E,$00,$10,$00,$1C,$00,$18
         .byte   $00,$0E,$00,$20,$FF
 sprite06TPiece:
-        .byte   $00,$7B,$02,$FC,$00,$7B,$02,$04
-        .byte   $00,$7B,$02,$0C,$08,$7B,$02,$04
+        .byte   $00,$7B,$01,$FC,$00,$7B,$01,$04
+        .byte   $00,$7B,$01,$0C,$08,$7B,$01,$04
         .byte   $FF
 sprite07SPiece:
-        .byte   $00,$7D,$02,$04,$00,$7D,$02,$0C
-        .byte   $08,$7D,$02,$FC,$08,$7D,$02,$04
+        .byte   $00,$7D,$01,$04,$00,$7D,$01,$0C
+        .byte   $08,$7D,$01,$FC,$08,$7D,$01,$04
         .byte   $FF
 sprite08ZPiece:
-        .byte   $00,$7C,$02,$FC,$00,$7C,$02,$04
-        .byte   $08,$7C,$02,$04,$08,$7C,$02,$0C
+        .byte   $00,$7C,$01,$FC,$00,$7C,$01,$04
+        .byte   $08,$7C,$01,$04,$08,$7C,$01,$0C
         .byte   $FF
 sprite09JPiece:
-        .byte   $00,$7D,$02,$FC,$00,$7D,$02,$04
-        .byte   $00,$7D,$02,$0C,$08,$7D,$02,$0C
+        .byte   $00,$7D,$01,$FC,$00,$7D,$01,$04
+        .byte   $00,$7D,$01,$0C,$08,$7D,$01,$0C
         .byte   $FF
 sprite0ALPiece:
-        .byte   $00,$7C,$02,$FC,$00,$7C,$02,$04
-        .byte   $00,$7C,$02,$0C,$08,$7C,$02,$FC
+        .byte   $00,$7C,$01,$FC,$00,$7C,$01,$04
+        .byte   $00,$7C,$01,$0C,$08,$7C,$01,$FC
         .byte   $FF
 sprite0BOPiece:
-        .byte   $00,$7B,$02,$00,$00,$7B,$02,$08
-        .byte   $08,$7B,$02,$00,$08,$7B,$02,$08
+        .byte   $00,$7B,$01,$00,$00,$7B,$01,$08
+        .byte   $08,$7B,$01,$00,$08,$7B,$01,$08
         .byte   $FF
 sprite0CIPiece:
-        .byte   $04,$7B,$02,$F8,$04,$7B,$02,$00
-        .byte   $04,$7B,$02,$08,$04,$7B,$02,$10
+        .byte   $04,$7B,$01,$F8,$04,$7B,$01,$00
+        .byte   $04,$7B,$01,$08,$04,$7B,$01,$10
         .byte   $FF
 sprite0EHighScoreNameCursor:
         .byte   $00,$FC,$21,$00,$FF
 ; Unused, but referenced from unreferenced_orientationToSpriteTable
 sprite0FTPieceOffset:
@@ -2356,14 +2400,15 @@ render_mode_play_and_demo:
 @playStateNotDisplayLineClearingAnimation:
         lda     player1_vramRow
         sta     vramRow
         lda     #$04
         sta     playfieldAddr+1
-        jsr     copyPlayfieldRowToVRAM
-        jsr     copyPlayfieldRowToVRAM
-        jsr     copyPlayfieldRowToVRAM
-        jsr     copyPlayfieldRowToVRAM
+        .import copyPlayfieldRowToVRAM_fast
+        jsr     copyPlayfieldRowToVRAM_fast
+        jsr     copyPlayfieldRowToVRAM_fast
+        jsr     copyPlayfieldRowToVRAM_fast
+        jsr     copyPlayfieldRowToVRAM_fast
         lda     vramRow
         sta     player1_vramRow
 @renderPlayer2Playfield:
         lda     numberOfPlayers
         cmp     #$02
@@ -2397,14 +2442,14 @@ @renderPlayer2Playfield:
 @player2PlayStateNotDisplayLineClearingAnimation:
         lda     player2_vramRow
         sta     vramRow
         lda     #$05
         sta     playfieldAddr+1
-        jsr     copyPlayfieldRowToVRAM
-        jsr     copyPlayfieldRowToVRAM
-        jsr     copyPlayfieldRowToVRAM
-        jsr     copyPlayfieldRowToVRAM
+        jsr     copyPlayfieldRowToVRAM_fast
+        jsr     copyPlayfieldRowToVRAM_fast
+        jsr     copyPlayfieldRowToVRAM_fast
+        jsr     copyPlayfieldRowToVRAM_fast
         lda     vramRow
         sta     player2_vramRow
 @renderLines:
         lda     outOfDateRenderFlags
         and     #$01
@@ -2424,21 +2469,21 @@ @renderLines:
         and     #$FE
         sta     outOfDateRenderFlags
         jmp     @renderLevel
 
 @renderLinesTwoPlayers:
-        lda     #$20
+        lda     #$21
         sta     PPUADDR
-        lda     #$68
+        lda     #$CF
         sta     PPUADDR
         lda     player1_lines+1
         sta     PPUDATA
         lda     player1_lines
         jsr     twoDigsToPPU
-        lda     #$20
+        lda     #$23
         sta     PPUADDR
-        lda     #$7A
+        lda     #$30
         sta     PPUADDR
         lda     player2_lines+1
         sta     PPUDATA
         lda     player2_lines
         jsr     twoDigsToPPU
@@ -2464,12 +2509,15 @@ @renderLevel:
         jsr     updatePaletteForLevel
         lda     outOfDateRenderFlags
         and     #$FD
         sta     outOfDateRenderFlags
 @renderScore:
-        lda     numberOfPlayers
-        cmp     #$02
+        ;lda     numberOfPlayers
+        ;cmp     #$02
+        .import renderPlay_mod
+        jsr     renderPlay_mod
+        nop
         beq     @renderStats
         lda     outOfDateRenderFlags
         and     #$04
         beq     @renderStats
         lda     #$21
@@ -2592,18 +2640,18 @@ copyPlayfieldRowToVRAM:
         lda     playfieldAddr+1
         cmp     #$05
         beq     @playerTwo
         lda     vramPlayfieldRows,x
         sec
-        sbc     #$02
+        sbc     #$04
         sta     PPUADDR
         jmp     @copyRow
 
 @playerTwo:
         lda     vramPlayfieldRows,x
         clc
-        adc     #$0C
+        adc     #$0E
         sta     PPUADDR
         jmp     @copyRow
 
 @onePlayer:
         lda     vramPlayfieldRows,x
@@ -2653,18 +2701,18 @@ @twoPlayers:
         lda     playfieldAddr+1
         cmp     #$04
         bne     @player2
         lda     generalCounter
         sec
-        sbc     #$02
+        sbc     #$04
         sta     generalCounter
         jmp     @updateVRAM
 
 @player2:
         lda     generalCounter
         clc
-        adc     #$0C
+        adc     #$0E
         sta     generalCounter
 @updateVRAM:
         iny
         lda     vramPlayfieldRows,y
         sta     generalCounter2
@@ -2717,11 +2765,11 @@ @copyPalettes:
         lda     #$00
         sta     generalCounter
 @copyPalette:
         lda     #$3F
         sta     PPUADDR
-        lda     #$08
+        lda     #$04
         clc
         adc     generalCounter
         sta     PPUADDR
         lda     colorTable,x
         sta     PPUDATA
@@ -2767,11 +2815,12 @@ @ret:   rts
 
 playState_spawnNextTetrimino:
         lda     vramRow
         cmp     #$20
         bmi     @ret
-        lda     numberOfPlayers
+        ;lda     numberOfPlayers
+        lda     #$01
         cmp     #$01
         beq     @notDelaying
         lda     twoPlayerPieceDelayCounter
         cmp     #$00
         bne     @twoPlayerPieceDelay
@@ -2796,24 +2845,25 @@ @notDelaying:
         sta     tetriminoY
         lda     #$01
         sta     playState
         lda     #$05
         sta     tetriminoX
-        ldx     nextPiece
+        ldx     nextPiece_
         lda     spawnOrientationFromOrientation,x
         sta     currentPiece
         jsr     incrementPieceStat
-        lda     numberOfPlayers
+        ;lda     numberOfPlayers
+        lda     #$01
         cmp     #$01
         beq     @onePlayerPieceSelection
         lda     nextPiece_2player
         sta     nextPiece
         jmp     @resetDownHold
 
 @onePlayerPieceSelection:
         jsr     chooseNextTetrimino
-        sta     nextPiece
+        sta     nextPiece_
 @resetDownHold:
         lda     #$00
         sta     autorepeatY
 @ret:   rts
 
@@ -2832,43 +2882,47 @@ chooseNextTetrimino:
         tax
         lda     spawnTable,x
         rts
 
 pickRandomTetrimino:
-        jsr     @realStart
-        rts
+        ;jsr     @realStart
+        ;rts
+        .import pickRandomTetrimino_mod
+        jsr     pickRandomTetrimino_mod
+        nop
 
 @realStart:
-        inc     spawnCount
-        lda     rng_seed
+        inc     spawnCount_
+        lda     personal_rng
         clc
-        adc     spawnCount
+        adc     spawnCount_
         and     #$07
         cmp     #$07
         beq     @invalidIndex
         tax
         lda     spawnTable,x
-        cmp     spawnID
+        cmp     spawnID_
         bne     useNewSpawnID
 @invalidIndex:
-        ldx     #$17
+        ;ldx     #$17
+        ldx     #personal_rng
         ldy     #$02
         jsr     generateNextPseudorandomNumber
-        lda     rng_seed
+        lda     personal_rng
         and     #$07
         clc
-        adc     spawnID
+        adc     spawnID_
 L992A:  cmp     #$07
         bcc     L9934
         sec
         sbc     #$07
         jmp     L992A
 
 L9934:  tax
         lda     spawnTable,x
 useNewSpawnID:
-        sta     spawnID
+        sta     spawnID_
         rts
 
 tetriminoTypeFromOrientation:
         .byte   $00,$00,$00,$00,$01,$01,$01,$01
         .byte   $02,$02,$03,$04,$04,$05,$05,$05
@@ -3128,11 +3182,12 @@ @ret:   rts
 
 playState_receiveGarbage:
         lda     numberOfPlayers
         cmp     #$01
         beq     L9B50
-        ldy     totalGarbageInactivePlayer
+        ;ldy     totalGarbageInactivePlayer
+        bne     L9B50
         beq     L9B50
         lda     vramRow
         cmp     #$20
         bmi     L9B52
         lda     multBy10Table,y
@@ -3154,11 +3209,11 @@ L9B31:  cpx     garbageHole
         beq     @garbageEmptySpace
         lda     #$78
         jmp     @placeGarbage
 
 @garbageEmptySpace:
-        lda     #$FF
+        lda     #$EF
 @placeGarbage:
         sta     (playfieldAddr),y
         inx
         cpx     #$0A
         bne     L9B45
@@ -3387,18 +3442,25 @@ gameModeState_handleGameOver:
         beq     @ret
         lda     #$04
         sta     generalCounter2
         lda     player2_playState
         cmp     #$00
-        bne     @ret
+        bne     @clearAAndRet
 @gameOver:
-        lda     numberOfPlayers
+        ;lda     numberOfPlayers
+        lda     #$01
         cmp     #$01
         beq     @onePlayerGameOver
-        lda     #$09
-        sta     gameModeState
-        rts
+        ;lda     #$09
+        ;sta     gameModeState
+        ;rts
+@clearAAndRet:
+; put known data in a, to avoid it from matching "cmp gameModeState" in
+; @mainLoop. In 1 player mode, numberOfPlayers will be in a.
+        lda     #$00
+        beq     @ret
+        nop
 
 @onePlayerGameOver:
         lda     #$03
         sta     renderMode
         lda     numberOfPlayers
@@ -3823,11 +3885,11 @@ L9FE9:  ldy     #$00
         sty     PPUSCROLL
         sty     PPUSCROLL
         rts
 
 showHighScores:
-        lda     numberOfPlayers
+        lda     #$01
         cmp     #$01
         beq     L9FFB
         jmp     LA085
 
 L9FFB:  jsr     bulkCopyToPpu
@@ -6204,17 +6266,17 @@ dmc1:   .byte   $6D,$6E,$6F,$5F,$3C,$33,
         .byte   $87,$78,$84,$7A,$77,$87,$78,$84
         .byte   $7A,$67,$87,$77,$87,$77,$72,$83
         .byte   $80,$81,$77,$67,$82,$79,$7A,$67
         .byte   $77,$78,$83,$72,$7A,$67,$23,$C0
         .byte   $20,$FF,$FF,$FF,$FF,$FF,$FF,$FF
-        .byte   $FF,$FF,$FF,$FF,$AF,$AF,$EF,$FF
-        .byte   $FF,$BF,$2F,$CF,$AA,$AA,$EE,$FF
-        .byte   $FF,$BB,$22,$CC,$AA,$AA,$EE,$FF
-        .byte   $FF,$23,$E0,$20,$BB,$22,$CC,$AA
-        .byte   $AA,$EE,$FF,$FF,$BB,$22,$CC,$AA
-        .byte   $AA,$EE,$FF,$FF,$FB,$F2,$FC,$FA
-        .byte   $FA,$FE,$FF,$FF,$0F,$0F,$0F,$0F
+        .byte   $FF,$FF,$FF,$FF,$5F,$5F,$DF,$FF
+        .byte   $FF,$7F,$1F,$CF,$55,$55,$DD,$FF
+        .byte   $FF,$77,$11,$CC,$55,$55,$DD,$FF
+        .byte   $FF,$23,$E0,$20,$77,$11,$CC,$55
+        .byte   $55,$DD,$FF,$FF,$77,$11,$CC,$55
+        .byte   $55,$DD,$FF,$FF,$F7,$F1,$FC,$F5
+        .byte   $F5,$FD,$FF,$FF,$0F,$0F,$0F,$0F
         .byte   $0F,$0F,$0F,$0F,$FF
 enter_high_score_nametable:
         .byte   $20,$00,$20,$72,$82,$62,$62,$62
         .byte   $80,$91,$80,$43,$83,$62,$72,$60
         .byte   $61,$82,$90,$83,$72,$90,$81,$83
